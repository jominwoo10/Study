*과제 : 선행학습하고 인증해서 밴드에 올리기

■ 병행 프로세스의 개념
- 프로세서 하나는 한 번에 하나만 실행 가능
- 운영체제가 프로세서를 빠르게 전환, 프로세서 시간 나눠 마치 프로세스
여러 개를 동시에 실행하는 것처럼 보이게 하는 것

■ 병행 프로세스 종류
- 독립 프로세스

- 협력 프로세스
	- 다른 프로세스와 상호작용하며 특정 기능을 수행하는 비동기적 프로세스
	- 제한된 컴퓨터 자원의 효율성 증대, 계산 속도 향상, 모듈적 구성 강화,
	개별 사용자의 여러 작업 동시에 수행 편의성 제공에 사용
	-> 예) 두 프로세스가 동일한 파일 사용 시 프로세스 하나가 파일에서 읽기
		수행 동안 다른 프로세스가 해당 파일에 쓰기를 하면 서로 영향 받음
	- 병행 프로세스들이 입출력장치, 메모리, 프로세서, 클록 등 자원을 서로 사용 시 충돌 발생
	- 충돌을 피하기 위한 프로세스의 상호작용 형태
	-> 1) 프로세스는 서로 인식하지 못하는 경쟁 관계 유지, 다중 프로그래밍 환경이 대표적인 예로,
		운영체제가 자원 경쟁 고려하여 동일한 디스크나 프린터로 접근 조절
	-> 2) 프로세스는 입출력 버스를 비롯한 개체를 공유하는 단계에서 간접적으로 서로 관계 인식, 
		이때 다른 프로세스에서 얻은 정보에 의존, 프로세스의 타이밍에 영향, 프로세스들은
		개체 공유에 따른 협력 필요
	-> 3) 프로세스에는 서로 인식하고 프로세스끼리 통신할 수 있는 기본 함수 있음, 프로세스가 서로
		협력 관계에 있으면 직접 통신 가능, 병행해서 함께 동작 가능
	- 경쟁 관계에 있는 프로세스들은 서로 정보를 교환하지 않지만 한 프로세스의 수행이 나머지 프로세스의
		수행에 영향을 미칠 수 있어 상호배제가 필요

■ 병행성
- 여러 프로세스를 이용하여 작업을 수행하는 것
- 시스템 신뢰도를 높이고 처리 속도를 개선, 처리 능력을 높이는 데 중요

■ 병행 프로세스의 문제
- 공유 자원 상호 배타적 사용(프린터, 통신망 등은 한순간에 프로세스 하나만 사용)
- 병행 프로세스 간의 협력이나 동기화 필요(상호배제도 동기화의 한 형태)
- 두 프로세스 간 데이터 교환을 위한 통신 필요
- 동시에 수행하는 다른 프로세스의 실행 속도와 관계 없이 항상 일정한 실행 결과 보장(결정성) 확보
- 교착 상태 해결, 병행 프로세스들의 병렬 처리 능력 극대화
- 실행 검증 문제 해결
- 병행 프로세스 수행 과정에서 발생하는 상호배제 보장

■ 선행 그래프
- 프로그래밍 언어에서 문장 간의 선행 관계를 그래프로 표현
- 프로세스 : 프로세스 집합과 이것의 선행 제약 두 가지 요소로 정의
- 선행 제약 : 프로세스를 순서대로 다른 상태로 옮기는 것
	-> 두 프로세스에 선행 제약이 없으면 이 둘은 독립적이므로 병행 실행 가능
- 선행 그래프는 선행 제약의 논리적 표현
- 순차적 활동을 표현하는 방향성 비순환 그래프
- 선행 그래프에서 노드는 소프트웨어 작업이거나 동시에 실행항 수 있는 프로그램 명령

■ fork와 join구조
- 선행 그래프는 연산의 선행 제약 정의에 유용하지만, 2차원이라 프로그램에는 사용 곤란
- 선행 관계 명시 위해 fork와 join 구조, 병행 문장 등 다른 방법 필요
- fork와 join 두 명령어 사용 최초로 병행을 언어적으로 표현

■ ★상호배제의 개념
- 병행 프로세스에서 프로세서 하나가 공유 자원 사용 시 다른 프로세스들이 동일한 일을 할 수 없도록 하는 방법
- 읽기 연산은 공유 데이터에 동시에 접근해도 문제 발생 않음
- 상호배제는 프로세스가 수정할 수 있는 공유 데이터에 접근할 때만 적용해야 하낟
- 동기화로 상호배제 보장할 수 있지만, 이 과정에서 교착 상태와 기아 상태가 발생할 수 있음
	-> 동기화 : 변수나 파일은 프로세스별도로 하나씩 차례로 읽거나 쓰도록 해야 하는데, 공유 자원을 동시에
		    사용하지 못하게 실행을 제어하는 방법을 뜻 함
- 동기화는 순차적으로 재사용 가능한 자원을 공유하려고 상호작용하는 프로세스 사이에서 나타남

■ ★상호배제의 구체적인 예
- 임계자원 : 두 프로세스가 동시에 사용할 수 없는 공유 자원
- 임계영역 : 임계 자원에 접근하고 실행하는 프로그램 코드 부분

■ 상호배제의 조건
1) 두 프로세스는 동시에 공유 자원에 진입 불가
2) 프로세스의 속도나 프로세서 수에 영향 받지 않음
3) 공유 자원을 사용하는 프로세스만 다른 프로세스 차단 가능
4) 프로세스가 공유 자원을 사용하려고 너무 오래 기다려서는 안 됨

■ 임계 영역의 개념
- 다수의 프로세스 접근 가능하지만, 어느 한 순간에는 프로세스 하나만 사용 가능

■ 임계 영역 이용한 상호배제
- 간편하게 상호배제 구현 가능(자물쇠와 열쇠 관계)
	-> 프로세스가 진입하지 못하는 임계 영역(자물쇠로 잠근 상태)
- 임계 영역을 이용한 상호배제는 어떤 프로세스가 열쇠 사용할 수 있는지 확인하려고 검사하는 동작과 다른 프로세스
사용 금지하는 동작으로 분류

■ 병행 프로세스에서 영역 구분
	do {
		while(turn != i); -> 진입 영역
		/* 임계 영역 */
		turn = j;	  -> 탈출 영역
		/* 나머지 영역*/
	} while(TRUE)

■ 임계 영역을 어떻게 구현했느냐에 따라 상호배제 성공 여부가 결정

■ ★임계 영역은 다음 세가지 조건을 만족해야 한다
1) 상호배제 : 어떤 프로세스가 임계 영역에서 작업중, 다른 프로세스 임계 영역 진입 불가
2) 진행 : 임계 영역에 프로세스가 없는 상태에서 어떤 프로세스가 들어갈지 결정
3) 한정 대기 : 다른 프로세스가 임계 영역을 무한정 기다리는 상황 방지 위해 임계 영역에 한 번
		들어갔던 프로세스는 다음에 임계 영역에 다시 들어갈 때 제한

■ 생산자 소비자 문제
- 운영체제에서 비동기적으로 수행하는 모델
- 생산자 프로세스가 생산한 정보를 소비자 프로세스가 소비하는 형태

■ 생산자의 소비자에게 데이터 전송
- 소비자가 데이터를 받을 준비를 마칠 때까지 생산자는 버퍼로 데이터 전송

■ 생산자와 소비자의 공유 버퍼
- 생산자는 버퍼가 꽉 차면 더이상 생산 불가, 소비자는 버퍼가 비면 데이터 소비 불가

■ 경쟁상태
- 경쟁상태의 개념
	-> 여러 프로세스가 동시에 공유 데이터에 접근 시, 접근 순서에 따라 실행 결과 달라지는 상황
	-> 공유데이터에 마지막으로 남는 데이터의 결과 보장할 수 없는 상황
- 경쟁 상태의 예방
	-> 병행 프로세스들을 동기화해야 함(임계 영역 이용한 상호배제로 구현 가능)