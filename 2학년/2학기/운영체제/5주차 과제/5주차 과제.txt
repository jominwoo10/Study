프로세스 스케줄러
	-프로세스 제어 블록의 우선순위 이용하여 준비 리스트의 프로세스 처리
	-준비 리스트의 프로세슨는 프로세서 중심 프로세스와 입출력 중심 프로스세로 구분

문맥교환
	-이전 프로세스의 상태 레지스터 내용 보관하고 다른 프로세스의 레지스터 적재하여 프로세스를 	교환하는 일련의 과정
	-오버헤드 발생, 이는 메모리 속도, 레지스터 수, 특수 명령어의 유무에 따라 다름
	-오버헤드는 시간 비용 소요되어 운영체제 설계 시 불필요한 문맥 교환 감수가 주요 목표
	-문맥교환은 프로세스가 준비 -> 실행, 실행 -> 준비, 실행 ->대기 상태로 바뀔 때 발생한다

스레드 사용 이점
	- 사용자 응답성 증가
	- 긴 작업 수행시에도 사용자 응답성을 높일 수 있음
	- 스레드 한 개가 파일을 로딩하는 동안 다른 스레드는 사용자와 상호작용 가능

- 프로세스의 자원과 메모리 공유 가능
	- 한 프로세스에 속한 다수의 작업 스레드들이 자원과 메모리를 공유하며 처리

- 경제성 좋음
	- 프로세스를 생성/문맥 교환하는 것보다 더 빠름
- 다중 처리(멀티 프로세싱)로 성능과 효율 향상
	-프로세스 하나에 포함된 스레드들은 공동의 목적 달성을 위해 병렬 수행
	- 프로세스가 하나인 서로 다른 프로세서에서 다른 프로그램의 다른 부분 동시 실행

스레드의 운영체제에 따른 구현
	-사용자 수준 스레드 : 다대일(n:1)매핑
	-> 스레드 라이브러리를 이용하여 작동하는 형태
	-> 스레드 라이브러리 : 스레드의 생성과 종료, 스레드 간의 메시지 전달, 스레드의 스케줄링과 문맥 등 정보 보관
	-> 스레드와 관련된 모든 행위를 사용자 영역에서함(커널이 스레드 존재를 모름)
	-> 스레드 교환에 커널이 개입하지 않아 커널에서 사용자 영역으로 전환 불필요

장점)
	이식성 높음 : 커널에 독립적 스케줄링을 할 수 있어 모든 운영체제에 적용
	오버헤드 적음 : 스케줄링, 동기화 위해 커널을 호출 하지 않으므로 커널 영역 전환 오버헤드 감	소

단점)
	시스템의 동시성 지원하지 않음 : 스레드가 아닌 프로세스 단위로 프로세서 할당하여 다중 처리 	환경을 갖춰도 스레드 단위로 다중 처리 불가능, 동일한 프로세스의 스레드 한 개 가 대기 상태	가 되면 이 중 어떤 스레드도 실행 불가

	확장 제약이 따름 : 커널이 한 프로세스에 속한 여러 스레드에 프로세서를 동시에 할당 할수 없	어 다중 처리 시스템에서 규모 확장 곤란


	-커널 수준 스레드 : 일대일(1:1) 매핑

개념)
	-사용자 수준 스레드의 한계 극복 방법으로, 커널이 스레드와 관련된 모든 작업 관리
	-한 프로세서에서 다수의 스레드가 프로세서를 할당받아 병행수 수행, 스레드 한 개가 대기 상태	가 되면 동일한 프로세스에 속한 다른 스레드로 교환 가능

	-혼합형 스레드 : 다대다(n:m) 매핑

	- 사용자 수준 스레드와 커널 수준 스레드 혼합한 구조 -> 효율적이면서 유연함

스레드 특징 
	- 중량 프로세스와 특징이 동일하면서도 매우 효율적
	-> 다중 스레드 시스템인 매크는 커널이 여러 개의 요청에 동시에 서비스하도록 할 수 있음
	   현재 실행하는 스레드가 대기 상태가 되면 동일한 그룹에 있는 다른 스레드 실행 가능

	- 다중 프로세스에서는 각 프로세스를 다른 프로세스와 독립적 실행, 각각 프로그램 카운터, 스	택, 레지스터, 주소 공간 보유. 그러므로 프로세서가 하나인 시스템에서는 파일 서버가 디스크 	입출력을 기다리는 동안 대기 상태가 될 수 있음. 스레드가 여러 개인 프로세스 하나는 서버 스	레드 한 개가 대기 상태일 동안 동일 프로세스의 다른 스레드 실행 가능(작업령량 증가하고 시스	템 전체의 성능 향상)