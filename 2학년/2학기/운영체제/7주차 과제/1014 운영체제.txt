■ 데커의 알고리즘 개념
- 두 프로스세가 서로 통신하려고 공유 메모리를 사용하여 충돌 없이 단일 자원을 공유할 수 있도록
허용하는 알고리즘
- 병행 프로그래밍 상호배제 문제의 첫 번째 해결책
- 각 프로세스 플래그 설정 가능, 다른 프로세스 확인 후 플래그 재설정 가능
- 프로세스가 임계 영역에 진입하고 싶으면 플래그 설정하고 대기
	-> 다른 프로세스가 이미 임계 영역에 있으면 해당 프로세스를 종료할 때 까지 while문에서
	   순환 대기

■ 데커의 알고리즘 특징
- 특별한 하드웨어 명령문 필요 없음
- 임계 영역 바깥에서 수행 중인 프로스세가 다른 프로세스들이 임계 영역 진입 막지 않음
- 임계 영역에 들어가기를 원하는 프로세서 무한정 기다리게 하지 않음

■ TestAndSet 명령어의 개념(하드웨어로 해결)
- 공유 변수 수정하는 동안 인터럽트 발생을 억제하여 임계 영역 문제를 간단히 해결
- 항상 적용할 수 없고 실행 효율 현저히 떨어짐
- 소프트웨어적인 해결책은 더 복잡하고 프로세스가 2개 이상일때는 더 많은 대기 가능성 있음
- 메모리 영역의 값에 대해 검사와 수정을 원자적으로 수행할 수 있는 하드웨어 명령어 TestAndSet
을 이용하여 해결 가능
- 알고리즘이 간단, 하나의 메모리 사이클에서 수행하여 경쟁 상황을 해결 가능
- 기계명령어 2개
	-> 원자적 연산 명령어 : TestAndSet
	-> TestAndSet에 지역변수 lock 설정 명령어
- 해당 주소의 값을 읽고 새 값으로 교체하면서 해당 메모리 위치의 이전 값 반환

■ TestAndSet 명령어의 원자적 연산 수행
	 //target을 검사하고, target 값을 true로 설정
	 boolean TestAndSet (boolean *target){
		boolean temp = *target;  //이전 값 기록
		*target = true;		 // true로 설정
		return temp;		 // 값 변환
	}

■ 부울 변수 lock을 사용한 상호배제
- 프로세스가 임계 영역에 있으면 1로 없으면 0으로 설정
- 부울 변수 lock을 false로 초기화하여 상호배제 구현

■ lock을 사용한 상호배제
	do
	{
		while(TestAndSet(&lock))
			;
			//임계 영역
		lock = false;
			//나머지 영역
	}while(true);

■ 세마포 개념과 동작
- 다익스트라가 테스 명령어의 문제 해결을 위해 제안
- 상호배제 및 다양한 연산의 순서도 제공
- 세마포 같은 true나 false로, P와V연산과 관련, 음이 아닌 정수 플래그 변수
- 세마포를 의미하는 S 표준단위 연산 P와 V로만 접근하는 정수 변수
- P(S) : 프로세스 대기하게 하는 wait 동작, 임계 영역에 진입하는 연산
- V(S) : 대기 중인 프로세스 깨우려고 신호 보내는 signal 동작, 임계 영역에서 나오는 연산

■ 이진 세마포
- 세마포 S를 상호배제에 사용 1또는 0으로 초기화, P와V의 연산 교대 실행
	-> S=1이면 P연산 먼저 수행, S=0이면 V연산 먼저 수행

■ 계수 세마포
- 유한한 자원에 접근 제어 가능, 여러 번 획득, 해제할 수 있도록 count 자원의 사용 허가 값으로 사용
- 사용 가능한 자원 수로 초기화하므로 count를 초기의 세마포 수로 초기화

■ 세마포의 구현
- 빠른대기(busy wating)-스핀락
  - 임계영역에 진입하기 위해 기다리는 동안 계속 순환 실행됨
	-> 프로세스 중단 가능, 프로세스 중단은 세마포와 연관된 준비 큐에 프로세스를 배치, 대기 
	   상태로 전환
	-> 중단된 프로세스는 다픈 프로세스가 signal 연산을 실행해야 재 시작 가능
	-> 대기 상태에서 준비 상태로 변경 할 때 wakeup연산으로 다시 시작하여 다음 준비 큐에 놈

■ 세마포
- 세마포에서 wait와 signal 연산을 생략하면 상호배제 문제가 발생
- wait 연산 때문에 대기하는 프로세스들이 교착 상태에 빠질 수 있다.
- 프로세스는 한 번에 세마포 하나만 대기할 수 있어 자원을 할당하는 상황에서 두 프로세스가 각각
자원을 하나씩 보유하고 상대방의 자원을 사용하려고 대기하는 교착 상태를 가져올 수 있다

■ 모니터의 개념과 구조
- 세마포의 오용으로 여러 가지 오루가 쉽게 발생하면 프로그램 작성 곤란, 이런 단점 극복 위해등장
- 핸슨 제안, 호 수정한 공유 자원과 이것의 임계 영역 관리 소프트웨어 구성체
- 사용자 사이에서 통신하려고 동기화하고, 자원에 배타적으로 접근할 수 있도록 프로세스가 사용하는 병행 프로그래밍 구조

■ 모니터의 개념과 구조2
- 모니터 : 임계구역과 유사한 개념
- 동기화를 구현하기 위한 특수 프로그램 기법으로 특정 공유 자원을 프로세스에게 할당하는데 필요한 데이터와 이 데이터를 처리하는 프로시저로 구성됨
- 자료 추상화와 정보 은폐 개념을 기초로 하며 공유 자원을 할당하기 위한 병행성 구조
- 모니터 내의 공유 자원을 사용하려면 프로세스는 반드시 모니터의 진입부를 호출해야 함
- 외부의 프로세스는 직접 액세스할 수 없으며, 모니터의 경계에서 상호 배제가 시행됨
- 한 순간에 하나의 프로세스만 진입하여 자원을 사용할 수 있음
- 모니터에서 사용되는 연산은 wait과 signal이 있다